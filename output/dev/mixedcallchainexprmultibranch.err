output prefix: llvm/dev/mixedcallchainexprmultibranch
llvmas: /usr/lib/llvm-3.8/bin/llvm-as
llc: /usr/lib/llvm-3.8/bin/llc
cc: gcc
codegen: /home/rafay/Desktop/decafCompiler/answer/decafcomp
stdlib: /home/rafay/Desktop/decafCompiler/answer/decaf-stdlib.c
generating llvm code:/home/rafay/Desktop/decafCompiler/answer/decafcomp ... ok
; ModuleID = 'Test'

declare void @print_int(i32)

define void @test3(i1 %a, i32 %x) {
entry:
  %a1 = alloca i1
  store i1 %a, i1* %a1
  %x2 = alloca i32
  store i32 %x, i32* %x2
  %x3 = load i32, i32* %x2
  call void @print_int(i32 %x3)
  %a4 = load i1, i1* %a1
  %zexttmp = zext i1 %a4 to i32
  call void @print_int(i32 %zexttmp)
  ret void
}

define void @test2b(i32 %x, i1 %a) {
entry:
  %x1 = alloca i32
  store i32 %x, i32* %x1
  %a2 = alloca i1
  store i1 %a, i1* %a2
  %x3 = load i32, i32* %x1
  call void @print_int(i32 %x3)
  %a4 = load i1, i1* %a2
  %zexttmp = zext i1 %a4 to i32
  call void @print_int(i32 %zexttmp)
  %a5 = load i1, i1* %a2
  %x6 = load i32, i32* %x1
  call void @test3(i1 %a5, i32 %x6)
  ret void
}

define void @test2a(i32 %x, i1 %a) {
entry:
  %x1 = alloca i32
  store i32 %x, i32* %x1
  %a2 = alloca i1
  store i1 %a, i1* %a2
  %x3 = load i32, i32* %x1
  call void @print_int(i32 %x3)
  %a4 = load i1, i1* %a2
  %zexttmp = zext i1 %a4 to i32
  call void @print_int(i32 %zexttmp)
  %a5 = load i1, i1* %a2
  %a6 = load i1, i1* %a2
  %nottmp = xor i1 %a6, true
  %x7 = load i32, i32* %x1
  %addtmp = add i32 %x7, 1
  call void @test3(i1 %nottmp, i32 %addtmp)
  ret void
}

define void @test1(i1 %a, i32 %x) {
entry:
  %a1 = alloca i1
  store i1 %a, i1* %a1
  %x2 = alloca i32
  store i32 %x, i32* %x2
  %x3 = load i32, i32* %x2
  call void @print_int(i32 %x3)
  %a4 = load i1, i1* %a1
  %zexttmp = zext i1 %a4 to i32
  call void @print_int(i32 %zexttmp)
  %x5 = load i32, i32* %x2
  %addtmp = add i32 %x5, 1
  %a6 = load i1, i1* %a1
  %a7 = load i1, i1* %a1
  %nottmp = xor i1 %a7, true
  call void @test2a(i32 %addtmp, i1 %nottmp)
  %x8 = load i32, i32* %x2
  %addtmp9 = add i32 %x8, 1
  %a10 = load i1, i1* %a1
  %a11 = load i1, i1* %a1
  %nottmp12 = xor i1 %a11, true
  call void @test2b(i32 %addtmp9, i1 %nottmp12)
  ret void
}

define i32 @main() {
entry:
  call void @test1(i1 true, i32 1)
  ret i32 0
}
assembling to bitcode:/usr/lib/llvm-3.8/bin/llvm-as "llvm/dev/mixedcallchainexprmultibranch.llvm" -o "llvm/dev/mixedcallchainexprmultibranch.llvm.bc" ... ok
converting to native code:/usr/lib/llvm-3.8/bin/llc "llvm/dev/mixedcallchainexprmultibranch.llvm.bc" -o "llvm/dev/mixedcallchainexprmultibranch.llvm.s" ... ok
linking:gcc -o "llvm/dev/mixedcallchainexprmultibranch.llvm.exec" "llvm/dev/mixedcallchainexprmultibranch.llvm.s" "/home/rafay/Desktop/decafCompiler/answer/decaf-stdlib.c" ... ok
running:llvm/dev/mixedcallchainexprmultibranch.llvm.exec ... ok
