output prefix: llvm/test/5blocks-fcall
llvmas: /usr/lib/llvm-3.8/bin/llvm-as
llc: /usr/lib/llvm-3.8/bin/llc
cc: gcc
codegen: /home/rafay/Desktop/decafCompiler/answer/decafcomp
stdlib: /home/rafay/Desktop/decafCompiler/answer/decaf-stdlib.c
generating llvm code:/home/rafay/Desktop/decafCompiler/answer/decafcomp ... ok
; ModuleID = 'C'

declare void @print_int(i32)

define i32 @main() {
entry:
  %x = alloca i32
  %y = alloca i32
  store i32 1, i32* %x
  store i32 100, i32* %y
  %tmp = load i32, i32* %x
  call void @print_int(i32 %tmp)
  %tmp1 = load i32, i32* %y
  call void @print_int(i32 %tmp1)
  %x2 = alloca i32
  store i32 2, i32* %x2
  %tmp3 = load i32, i32* %x2
  call void @print_int(i32 %tmp3)
  %tmp4 = load i32, i32* %y
  call void @print_int(i32 %tmp4)
  %x5 = alloca i32
  store i32 3, i32* %x5
  %tmp6 = load i32, i32* %x5
  call void @print_int(i32 %tmp6)
  %tmp7 = load i32, i32* %y
  call void @print_int(i32 %tmp7)
  %x8 = alloca i32
  store i32 4, i32* %x8
  %tmp9 = load i32, i32* %x8
  call void @print_int(i32 %tmp9)
  %tmp10 = load i32, i32* %y
  call void @print_int(i32 %tmp10)
  %x11 = alloca i32
  store i32 5, i32* %x11
  %tmp12 = load i32, i32* %x11
  call void @print_int(i32 %tmp12)
  %tmp13 = load i32, i32* %y
  call void @print_int(i32 %tmp13)
  ret i32 0
}
assembling to bitcode:/usr/lib/llvm-3.8/bin/llvm-as "llvm/test/5blocks-fcall.llvm" -o "llvm/test/5blocks-fcall.llvm.bc" ... ok
converting to native code:/usr/lib/llvm-3.8/bin/llc "llvm/test/5blocks-fcall.llvm.bc" -o "llvm/test/5blocks-fcall.llvm.s" ... ok
linking:gcc -o "llvm/test/5blocks-fcall.llvm.exec" "llvm/test/5blocks-fcall.llvm.s" "/home/rafay/Desktop/decafCompiler/answer/decaf-stdlib.c" ... ok
running:llvm/test/5blocks-fcall.llvm.exec ... ok
